[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "phaser-mcp-server"
version = "1.0.0"
description = "Docker-based MCP Server for Phaser Game Engine Documentation"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Phaser MCP Server Team" }
]
keywords = [
    "mcp",
    "model-context-protocol",
    "phaser",
    "game-development",
    "documentation",
    "ai-assistant"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Games/Entertainment",
    "Topic :: Documentation",
]
requires-python = ">=3.13"
dependencies = [
    "mcp[cli]>=1.0.0",
    "httpx>=0.25.0",
    "beautifulsoup4>=4.12.0",
    "markdownify>=0.11.0",
    "pydantic>=2.0.0",
    "loguru>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "coverage>=7.0.0",
    "ruff>=0.1.0",
    "pyright>=1.1.0",
    "pre-commit>=3.0.0",
    "commitizen>=3.0.0",
    "mdformat>=0.7.17",
    "mdformat-gfm>=0.3.5",
    "mdformat-frontmatter>=2.0.1",
    "mdformat-tables>=0.4.1",
]

[project.scripts]
phaser-mcp-server = "phaser_mcp_server.server:cli_main"

[project.urls]
Homepage = "https://github.com/satoshi256kbyte/phaser-mcp-server"
Repository = "https://github.com/satoshi256kbyte/phaser-mcp-server"
Issues = "https://github.com/satoshi256kbyte/phaser-mcp-server/issues"
Documentation = "https://docs.phaser.io/"

# Hatchling build configuration
[tool.hatch.build.targets.wheel]
packages = ["phaser_mcp_server"]

[tool.hatch.build.targets.sdist]
include = [
    "/phaser_mcp_server",
    "/tests",
    "/README.md",
    "/LICENSE",
]

# Ruff configuration
[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "D",   # pydocstyle
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]

# Pyright configuration
[tool.pyright]
include = ["phaser_mcp_server", "tests"]
exclude = ["**/__pycache__"]
stubPath = "phaser_mcp_server/stubs"
pythonVersion = "3.14"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=phaser_mcp_server",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=86",
    "-v",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "live: marks tests as requiring live internet connection",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["phaser_mcp_server"]
branch = true
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "phaser_mcp_server/stubs/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "pass",
    "raise ImportError",
]

[tool.coverage.html]
directory = "htmlcov"
title = "Phaser MCP Server Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

# Commitizen configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "phaser_mcp_server/__init__.py:__version__",
]

[dependency-groups]
dev = [
    "coverage>=7.9.2",
    "mdformat>=0.7.22",
    "mdformat-frontmatter>=2.0.8",
    "mdformat-gfm>=0.4.1",
    "mdformat-tables>=1.0.0",
]
